"""
Django settings for spotifyadder project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from decouple import config
from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@356kqu@5+-+=3j(^lz3sqo%&(e*)z^9a(b*jynaxn8x84#(x0'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['mysite.com', 'localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'account.apps.AccountConfig',    
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    ###
    'social_django', #OAuth 
    'django_extensions',
    'songs.apps.SongsConfig',
    'easy_thumbnails',
    ]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'spotifyadder.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'spotifyadder.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



AUTHENTICATION_BACKENDS = [  'account.authentication.EmailAuthBackend',
                           'django.contrib.auth.backends.ModelBackend', 
                                                       #"account.authentication.EmailOrUsernameBackend",
                            'social_core.backends.google.GoogleOAuth2',
                            'social_core.backends.spotify.SpotifyOAuth2',
                           ]



SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = config('GOOGLE_OAUTH2_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = config('GOOGLE_OAUTH2_SECRET')



SOCIAL_AUTH_PIPELINE = [
'social_core.pipeline.social_auth.social_details',
'social_core.pipeline.social_auth.social_uid',
'social_core.pipeline.social_auth.auth_allowed',
'social_core.pipeline.social_auth.social_user',
'social_core.pipeline.user.get_username',
'social_core.pipeline.user.create_user',
'account.authentication.create_profile',
'social_core.pipeline.social_auth.associate_user',
'social_core.pipeline.social_auth.load_extra_data',
#'social_core.pipeline.user.user_details',
'account.pipeline.safe_user_details',  # custom
]
"""will (by design) update the user model’s fields (first_name, last_name, etc.) every time the user logs in via a social provider if the new values differ (it does not check whether they belonged to another account). If you are authenticating first with one provider that supplies “Me llamo Lukas” and then log in as a different local user (maybe via email) but still route through a pipeline that applies the previous details dict (e.g. because it’s stored in the session or you manually call something), you can overwrite u2’s names.

Even simpler: you edited user u2’s profile at some point (maybe through the profile form) that was auto‑filled with the social data (since you reused the same form). When you hit “save”, you persisted those names to u2"""
SOCIAL_AUTH_PROTECTED_USER_FIELDS = ['email', 'first_name', 'last_name']
#This prevents the default user_details step from overwriting these fields.

#######
LOGIN_REDIRECT_URL = 'dashboard' #Tells Django which URL to redirect the user to after a successful login
#if no next parameter is present in the request
LOGIN_URL = 'login' #The URL to redirect the user to log in (for example, views using the login_required decorator 
LOGOUT_URL = 'logout' # URL to redirect the user to log out


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# where to store extra tokens
SOCIAL_AUTH_JSONFIELD_ENABLED = True

SOCIAL_AUTH_SPOTIFY_KEY        = config('SPOTIFY_KEY')
SOCIAL_AUTH_SPOTIFY_SECRET     = config('SPOTIFY_SECRET')
SOCIAL_AUTH_SPOTIFY_SCOPE = [
    'playlist-modify-private',
    'playlist-modify-public',   # optional; include if you might create public playlists
    # 'user-library-modify',     # keep if you also save tracks to library
]
SOCIAL_AUTH_SPOTIFY_REDIRECT_URI = 'https://127.0.0.1:8000/spotify/complete/'
